// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetBatchesData, GetBatchIdData, GetBatchIdResponse, GetBatchIdError, PatchLettersBatchData, PatchLettersBatchResponse, PatchLettersBatchError, GetAListOfLettersData, PostLetterData, GetLetterStatusData, GetLetterStatusResponse, GetLetterStatusError, PatchLettersData, PatchLettersResponse, PatchLettersError, ListMiData, CreateMiData, GetMiData, ListSpecificationData, CreateSpecificationData, GetSpecificationData, PatchSpecificationData, ListProofData, CreateProofData, GetProofData, PatchProofData, ListArtworkData, CreateArtworkData, GetArtworkData, PatchArtworkData, ListReturnData, CreateReturnData, GetReturnData, PostDataData, GetDataData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Retrieve a list of available letter batches
 */
export const getBatches = <ThrowOnError extends boolean = false>(options: Options<GetBatchesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/batch',
        ...options
    });
};

/**
 * Retrieve a batch of letters
 * Get details about a batch of letters
 */
export const getBatchId = <ThrowOnError extends boolean = false>(options: Options<GetBatchIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBatchIdResponse, GetBatchIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/batch/{id}',
        ...options
    });
};

/**
 * Update the status of a batch of letters
 * Update the status of a batch of letters by providing the new status in the request body.
 */
export const patchLettersBatch = <ThrowOnError extends boolean = false>(options: Options<PatchLettersBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchLettersBatchResponse, PatchLettersBatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/batch/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/vnd.api+json',
            ...options?.headers
        }
    });
};

/**
 * Get a list of letters
 * The key use of this endpoint is to query letters which have been cancelled using the `status=CANCELLED` query
 */
export const getAListOfLetters = <ThrowOnError extends boolean = false>(options: Options<GetAListOfLettersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/letter',
        ...options
    });
};

/**
 * Update the status of multiple letters
 */
export const postLetter = <ThrowOnError extends boolean = false>(options: Options<PostLetterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/letter',
        ...options
    });
};

/**
 * Retrieve the status of a letter
 * Get details the status of a letter.
 */
export const getLetterStatus = <ThrowOnError extends boolean = false>(options: Options<GetLetterStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLetterStatusResponse, GetLetterStatusError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/letter/{id}',
        ...options
    });
};

/**
 * Update the status of a letter
 * Update the status of a letter by providing the new status in the request body.
 */
export const patchLetters = <ThrowOnError extends boolean = false>(options: Options<PatchLettersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchLettersResponse, PatchLettersError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/letter/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/vnd.api+json',
            ...options?.headers
        }
    });
};

/**
 * List MI records
 */
export const listMi = <ThrowOnError extends boolean = false>(options: Options<ListMiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mi',
        ...options
    });
};

/**
 * Create a new MI record
 */
export const createMi = <ThrowOnError extends boolean = false>(options: Options<CreateMiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mi',
        ...options
    });
};

/**
 * Fetch a specific MI record
 */
export const getMi = <ThrowOnError extends boolean = false>(options: Options<GetMiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mi/{id}',
        ...options
    });
};

/**
 * List specifications
 */
export const listSpecification = <ThrowOnError extends boolean = false>(options: Options<ListSpecificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/specification',
        ...options
    });
};

/**
 * Create a new specification record
 */
export const createSpecification = <ThrowOnError extends boolean = false>(options: Options<CreateSpecificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/specification',
        ...options
    });
};

/**
 * Fetch metadata about a specific specification
 */
export const getSpecification = <ThrowOnError extends boolean = false>(options: Options<GetSpecificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/specification/{id}',
        ...options
    });
};

/**
 * Update metadata about a specific specification
 */
export const patchSpecification = <ThrowOnError extends boolean = false>(options: Options<PatchSpecificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/specification/{id}',
        ...options
    });
};

/**
 * List proof files
 */
export const listProof = <ThrowOnError extends boolean = false>(options: Options<ListProofData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/proof',
        ...options
    });
};

/**
 * Create a new proof metadata record
 */
export const createProof = <ThrowOnError extends boolean = false>(options: Options<CreateProofData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/proof',
        ...options
    });
};

/**
 * Fetch metadata about a specific proof file
 */
export const getProof = <ThrowOnError extends boolean = false>(options: Options<GetProofData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/proof/{id}',
        ...options
    });
};

/**
 * Update metadata about a specific proof file
 */
export const patchProof = <ThrowOnError extends boolean = false>(options: Options<PatchProofData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/proof/{id}',
        ...options
    });
};

/**
 * List artwork files
 */
export const listArtwork = <ThrowOnError extends boolean = false>(options: Options<ListArtworkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/artwork',
        ...options
    });
};

/**
 * Create a new artwork metadata record
 */
export const createArtwork = <ThrowOnError extends boolean = false>(options: Options<CreateArtworkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/artwork',
        ...options
    });
};

/**
 * Fetch metadata about a specific artwork file
 */
export const getArtwork = <ThrowOnError extends boolean = false>(options: Options<GetArtworkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/artwork/{id}',
        ...options
    });
};

/**
 * Update metadata about a specific artwork file
 */
export const patchArtwork = <ThrowOnError extends boolean = false>(options: Options<PatchArtworkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/artwork/{id}',
        ...options
    });
};

/**
 * List batches of returned letters
 */
export const listReturn = <ThrowOnError extends boolean = false>(options: Options<ListReturnData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/return',
        ...options
    });
};

/**
 * Create a new returned letter batch
 */
export const createReturn = <ThrowOnError extends boolean = false>(options: Options<CreateReturnData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/return',
        ...options
    });
};

/**
 * Fetch metadata about a specific return batch
 */
export const getReturn = <ThrowOnError extends boolean = false>(options: Options<GetReturnData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/return/{id}',
        ...options
    });
};

/**
 * Request a URL to upload a new data file
 */
export const postData = <ThrowOnError extends boolean = false>(options: Options<PostDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/data',
        ...options
    });
};

/**
 * Fetch metadata about an existing data file
 */
export const getData = <ThrowOnError extends boolean = false>(options: Options<GetDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/data/{id}',
        ...options
    });
};
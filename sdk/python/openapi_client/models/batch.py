# coding: utf-8

"""
    NHS Notify Supplier API

    API for communication suppliers to integrate with NHS Notify

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.batch_status import BatchStatus
from openapi_client.models.data_reference import DataReference
from openapi_client.models.letter import Letter
from typing import Optional, Set
from typing_extensions import Self

class Batch(BaseModel):
    """
    Batch
    """ # noqa: E501
    status: BatchStatus
    data: Optional[DataReference] = None
    letters: List[Letter]
    reason_code: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="reasonCode")
    reason_text: Optional[StrictStr] = Field(default=None, alias="reasonText")
    __properties: ClassVar[List[str]] = ["status", "data", "letters", "reasonCode", "reasonText"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Batch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in letters (list)
        _items = []
        if self.letters:
            for _item_letters in self.letters:
                if _item_letters:
                    _items.append(_item_letters.to_dict())
            _dict['letters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Batch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": obj.get("status") if obj.get("status") is not None else BatchStatus.PENDING,
            "data": DataReference.from_dict(obj["data"]) if obj.get("data") is not None else None,
            "letters": [Letter.from_dict(_item) for _item in obj["letters"]] if obj.get("letters") is not None else None,
            "reasonCode": obj.get("reasonCode"),
            "reasonText": obj.get("reasonText")
        })
        return _obj



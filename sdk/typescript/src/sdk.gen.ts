// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetBatchesData, GetBatchesResponse, GetBatchIdData, GetBatchIdResponse, GetBatchIdError, PatchLettersBatchData, PatchLettersBatchResponse, PatchLettersBatchError, GetAListOfLettersData, PostLetterData, GetLetterStatusData, GetLetterStatusResponse, GetLetterStatusError, PatchLettersData, PatchLettersResponse, PatchLettersError, ListMiData, CreateMiData, GetMiData, ListWhitemailData, CreateWhitemailData, GetWhitemailData, PostDataData, GetDataIdData, HeadDataIdData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Retrieve a list of available letter batches
 */
export const getBatches = <ThrowOnError extends boolean = false>(options: Options<GetBatchesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBatchesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/batch',
        ...options
    });
};

/**
 * Retrieve a batch of letters
 * Get details about a batch of letters
 */
export const getBatchId = <ThrowOnError extends boolean = false>(options: Options<GetBatchIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBatchIdResponse, GetBatchIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/batch/{id}',
        ...options
    });
};

/**
 * Update the status of a batch of letters
 * Update the status of a batch of letters by providing the new status in the request body.
 */
export const patchLettersBatch = <ThrowOnError extends boolean = false>(options: Options<PatchLettersBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchLettersBatchResponse, PatchLettersBatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/batch/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/vnd.api+json',
            ...options?.headers
        }
    });
};

/**
 * Get a list of letters
 * The key use of this endpoint is to query letters which have been cancelled using the `status=CANCELLED` query
 */
export const getAListOfLetters = <ThrowOnError extends boolean = false>(options: Options<GetAListOfLettersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/letter',
        ...options
    });
};

/**
 * Update the status of multiple letters
 */
export const postLetter = <ThrowOnError extends boolean = false>(options: Options<PostLetterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/letter',
        ...options
    });
};

/**
 * Retrieve the status of a letter
 * Get details the status of a letter.
 */
export const getLetterStatus = <ThrowOnError extends boolean = false>(options: Options<GetLetterStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLetterStatusResponse, GetLetterStatusError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/letter/{id}',
        ...options
    });
};

/**
 * Update the status of a letter
 * Update the status of a letter by providing the new status in the request body.
 */
export const patchLetters = <ThrowOnError extends boolean = false>(options: Options<PatchLettersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchLettersResponse, PatchLettersError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/letter/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/vnd.api+json',
            ...options?.headers
        }
    });
};

/**
 * List MI records
 */
export const listMi = <ThrowOnError extends boolean = false>(options: Options<ListMiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mi',
        ...options
    });
};

/**
 * Create a new MI record
 */
export const createMi = <ThrowOnError extends boolean = false>(options: Options<CreateMiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mi',
        ...options
    });
};

/**
 * Fetch a specific MI record
 */
export const getMi = <ThrowOnError extends boolean = false>(options: Options<GetMiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mi/{id}',
        ...options
    });
};

/**
 * List batches of whitemail letters
 */
export const listWhitemail = <ThrowOnError extends boolean = false>(options: Options<ListWhitemailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/whitemail',
        ...options
    });
};

/**
 * Create a new whitemail letter batch
 */
export const createWhitemail = <ThrowOnError extends boolean = false>(options: Options<CreateWhitemailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/whitemail',
        ...options
    });
};

/**
 * Fetch metadata about a specific whitemail batch
 */
export const getWhitemail = <ThrowOnError extends boolean = false>(options: Options<GetWhitemailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/whitemail/{id}',
        ...options
    });
};

/**
 * Request a URL to upload a new data file
 */
export const postData = <ThrowOnError extends boolean = false>(options: Options<PostDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/data',
        ...options
    });
};

/**
 * Fetch a data file
 */
export const getDataId = <ThrowOnError extends boolean = false>(options: Options<GetDataIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/data/{id}',
        ...options
    });
};

/**
 * Fetch data file metadata
 */
export const headDataId = <ThrowOnError extends boolean = false>(options: Options<HeadDataIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).head<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/data/{id}',
        ...options
    });
};

name: "Build Proxies"
description: "Build Proxies"
inputs:
  version:
    description: "Version number"
    required: true
runs:
  using: composite

  steps:
    - name: Checkout
      uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 24

    - name: Npm install
      working-directory: .
      run: npm ci
      shell: bash

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::820178564574:role/nhs-main-acct-supplier-api-github-deploy
        role-session-name: ${{ github.run_id }}
        aws-region: eu-west-2
        role-skip-session-tagging: true



    - name: Setup Proxy Name and target
      shell: bash
      run: |

        if [ -z $PR_NUMBER ]
        then
          echo "INSTANCE=$PROXYGEN_API_NAME" >> $GITHUB_ENV
          echo "TARGET=https://suppliers.dev.nhsnotify.national.nhs.uk" >> $GITHUB_ENV
          echo "SANDBOX_TAG=latest" >> $GITHUB_ENV
          echo "MTLS_CRT=/nhs/ssl/ca-crt" >> $GITHUB_ENV
          echo "MTLS_KEY=/nhs/ssl/ca-key" >> $GITHUB_ENV
          echo "MTLS_NAME=notify-supplier-mtls" >> $GITHUB_ENV
        else
          echo "TARGET=https://pr$PR_NUMBER.suppliers.dev.nhsnotify.national.nhs.uk" >> $GITHUB_ENV
          echo "INSTANCE=$PROXYGEN_API_NAME-PR-$PR_NUMBER" >> $GITHUB_ENV
          echo "SANDBOX_TAG=pr$PR_NUMBER" >> $GITHUB_ENV
          echo "MTLS_CRT=/nhs/pr$PR_NUMBER/ssl/ca-crt" >> $GITHUB_ENV
          echo "MTLS_KEY=/nhs/pr$PR_NUMBER/ssl/ca-key" >> $GITHUB_ENV
          echo "MTLS_NAME=notify-supplier-mtls-pr$PR_NUMBER" >> $GITHUB_ENV

        fi

    - name: Download MTLS Credentials
      shell: bash
      run: |
        mkdir -p ${HOME}/.proxygen
        aws ssm get-parameter --name $MTLS_CRT --with-decryption --query "Parameter.Value" --output text > ${HOME}/.proxygen/mtls.crt
        aws ssm get-parameter --name $MTLS_KEY --with-decryption --query "Parameter.Value" --output text > ${HOME}/.proxygen/mtls.key



    - name: Install Proxygen client
      shell: bash
      run: |
        # Install proxygen cli
        pip install pipx
        pipx install proxygen-cli

        # Setup proxygen auth and settings
        mkdir -p ${HOME}/.proxygen
        echo -n $PROXYGEN_PRIVATE_KEY | base64 --decode > ${HOME}/.proxygen/key
        envsubst < ./.github/proxygen-credentials-template.yaml > ${HOME}/.proxygen/credentials.yaml
        envsubst < ./.github/proxygen-credentials-template.yaml | cat
        envsubst < ./.github/proxygen-settings.yaml > ${HOME}/.proxygen/settings.yaml
        envsubst < ./.github/proxygen-settings.yaml | cat

    - name: Register MTLS cert with proxygen
      shell: bash
      run: |
        proxygen secret put --mtls-cert ${HOME}/.proxygen/mtls.crt --mtls-key ${HOME}/.proxygen/mtls.key internal-dev $MTLS_NAME

    - name: Build internal dev oas
      working-directory: .
      shell: bash
      run: |
        if [ -z $PR_NUMBER ]
        then
          make build-json-oas-spec APIM_ENV=internal-dev
        else
          make build-json-oas-spec APIM_ENV=internal-dev-pr
        fi

    - name: Set target and cert
      shell: bash
      run: |
        jq --arg newurl "$TARGET" '.["x-nhsd-apim"].target.url = $newurl' build/notify-supplier.json > build/notify-supplier_target.json && mv build/notify-supplier_target.json build/notify-supplier.json
        jq --arg newmtls "$MTLS_NAME" '.["x-nhsd-apim"].target.security.secret = $newmtls' build/notify-supplier.json > build/notify-supplier_target.json && mv build/notify-supplier_target.json build/notify-supplier.json

    - name: Deploy to Internal Dev
      shell: bash
      run: |
        proxygen instance deploy internal-dev $INSTANCE build/notify-supplier.json --no-confirm

    - name: Build sandbox oas
      working-directory: .
      shell: bash
      run: |
        make build-json-oas-spec APIM_ENV=sandbox

    - name: Set docker tag
      shell: bash
      run: |
        jq --arg newtag "$SANDBOX_TAG" '.["x-nhsd-apim"].target.containers[0].image.tag = $newtag' build/notify-supplier.json > build/notify-supplier_target.json && mv build/notify-supplier_target.json build/notify-supplier.json

    - name: Deploy to Internal Dev Sandbox
      shell: bash
      run: |
        proxygen instance deploy internal-dev-sandbox $INSTANCE build/notify-supplier.json --no-confirm
